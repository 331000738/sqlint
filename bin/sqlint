#!/usr/bin/env ruby

# What if 1000+ errors => --limit
# Split on "; -- ..."



$LOAD_PATH.unshift(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'pg_query'
require 'sqlint'

if ARGV.include?("--version")
  puts SQLint::VERSION
  exit 0
end

if ARGV.empty? || ARGV.include?("--help") || ARGV.include?("-h")
  puts "Usage: sqlint file.sql ..."
  exit 0
end

ERROR_TYPES = {error: "ERROR", warning: "WARNING"}

class String
  def sanitise
    gsub(/[[:cntrl:]+]/) do |bad|
      bad.codepoints.map { |c| "\\%04d" % c }.join
    end
  end
end

ARGV.each do |filename|
  File.open(filename, 'r') do |file|
    results = SQLint::Linter.new(filename, file).run
    results.each do |lint|
      message_lines = lint.message.sanitise.split("\n")
      puts [
        lint.filename,
        lint.line,
        lint.column,
        ERROR_TYPES[lint.type] + " " + message_lines.shift
      ].join(":")
      message_lines.each do |line|
        puts "  " + line
      end
    end
  end
end
